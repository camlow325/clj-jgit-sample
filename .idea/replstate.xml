<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1390421527214">{:repl-history {:ide [], :local [&quot;(:require '[clj-jgit.porcelain :as porc])&quot; &quot;(def my-repo\n  (porc/git-clone-full \&quot;https://github.com/camlow325/supermarket.git\&quot; \&quot;local-folder/supermarket\&quot;))\n&quot; &quot;(in-ns 'clj-jgit-sample.core)&quot; &quot;clojure.main&quot; &quot;sun&quot; &quot;clojure.test&quot; &quot;-main&quot; &quot;clj-jgit-sample.core/-main&quot; &quot;(porc/git-status my-repo)&quot; &quot;(my-repo\n  )&quot; &quot;(def my-repo []\n  (if (fs.core/directory? repo-local-dir))\n  (load-repo repo-local-dir)\n  (else (clj-jgit.porcelain/git-clone-full repo-remote-loc repo-local-dir)))&quot; &quot;(repo-remote-loc)&quot; &quot;(def bob \&quot;fred\&quot;)&quot; &quot;(bob)&quot; &quot;(def bob str \&quot;fred\&quot;)&quot; &quot;(def bob [] (\&quot;fred\&quot;))&quot; &quot;(def bob\n  (\&quot;fred\&quot;))&quot; &quot;(def bob \&quot;testing\&quot;)&quot; &quot;(println bob)&quot; &quot;(def bob \&quot;/tmp\&quot;)&quot; &quot;(if (fs.core/directory? bob) (println \&quot;yes bob\&quot;) (print \&quot;no bob\&quot;))&quot; &quot;(def my-repo\n  (if (fs.core/directory? \&quot;/tmp/therepo\&quot;))\n  (load-repo \&quot;/tmp/therepo\&quot;)\n  (clj-jgit.porcelain/git-clone-full \&quot;git@github.com:camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/therepo\&quot;))&quot; &quot;(defn\n  my-repo\n  (if (fs.core/directory? \&quot;/tmp/therepo\&quot;))\n  (load-repo \&quot;/tmp/therepo\&quot;)\n  (clj-jgit.porcelain/git-clone-full \&quot;git@github.com:camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/therepo\&quot;))&quot; &quot;(defn\n  my-repo []\n  (if (fs.core/directory? \&quot;/tmp/therepo\&quot;))\n  (load-repo \&quot;/tmp/therepo\&quot;)\n  (clj-jgit.porcelain/git-clone-full \&quot;git@github.com:camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/therepo\&quot;))&quot; &quot;(defn\n  my-repo []\n  (if (fs.core/directory? \&quot;/tmp/therepo\&quot;)\n  (load-repo \&quot;/tmp/therepo\&quot;)\n  (clj-jgit.porcelain/git-clone-full \&quot;git@github.com:camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/therepo\&quot;)))&quot; &quot;(defn\n  my-repo []\n  (if (fs.core/directory? \&quot;/tmp/therepo\&quot;)\n  (clj-jgit.porcelain/load-repo \&quot;/tmp/therepo\&quot;)\n  (clj-jgit.porcelain/git-clone-full \&quot;git@github.com:camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/therepo\&quot;)))&quot; &quot;(def\n  my-repo\n  (if (fs.core/directory? \&quot;/tmp/therepo\&quot;)\n  (clj-jgit.porcelain/load-repo \&quot;/tmp/therepo\&quot;)\n  (clj-jgit.porcelain/git-clone-full \&quot;git@github.com:camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/therepo\&quot;)))&quot; &quot;(clj-jgit.porcelain/load-repo \&quot;/tmp/shadow-of-clj-git-sample\&quot;)&quot; &quot;(clj-jgit.porcelain/git-clone-full \&quot;https://github.com/camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/shadow-of-clj-git-sample\&quot;)&quot; &quot;(clj-jgit.porcelain/git-clone-full \&quot;https://github.com/camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/shadow-of-clj-git-sample2\&quot;)&quot; &quot;(:repo (clj-jgit.porcelain/git-clone-full \&quot;https://github.com/camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/shadow-of-clj-git-sample2\&quot;))&quot; &quot;(:repo (clj-jgit.porcelain/git-clone-full \&quot;https://github.com/camlow325/clj-jgit-sample.git\&quot; \&quot;/tmp/shadow-of-clj-git-sample\&quot;))&quot; &quot;(def loaded-repo (clj-jgit.porcelain/load-repo \&quot;/tmp/shadow-of-clj-git-sample\&quot;))&quot; &quot;(println (clj-jgit.porcelain/git-status loaded-repo))&quot; &quot;(println \&quot;Repo status is\&quot; (clj-jgit.porcelain/git-status my-repo))&quot; &quot;(spit \&quot;/tmp/bob.txt\&quot; new java.util.Date)&quot; &quot;(spit \&quot;/tmp/bob.txt\&quot; .getTime(now))&quot; &quot;(java.util.Date)&quot; &quot;(java.util.Date.toString)&quot; &quot;(java.util.Date.)&quot; &quot;(spit \&quot;/tmp/bob.txt\&quot; \&quot;12345\&quot;)&quot; &quot;(spit \&quot;/tmp/bob.txt\&quot; java.util.Date.)&quot; &quot;(defn now [] (java.util.Date.))&quot; &quot;(spit \&quot;/tmp/bob.txt\&quot; now)&quot; &quot;(spit \&quot;/tmp/bob.txt\&quot; `now)&quot; &quot;(spit \&quot;/tmp/bob.txt\&quot; now.toString)&quot; &quot;(toString now)&quot; &quot;(.toString new java.util.Date)&quot; &quot;(.toString java.util.Date)&quot; &quot;(.toString java.util.Date.)&quot; &quot;(defn now [] (new java.util.Date\n                  ))&quot; &quot;(.toString now)&quot; &quot;(now)&quot; &quot;(.toString (new java.util.Date))&quot; &quot;(.toString (java.util.Date.))&quot; &quot;(spit \&quot;/tmp/bob.txt\&quot; (.toString (java.util.Date.)))&quot; &quot;(spit \&quot;/tmp/bob.txt\&quot; (str \&quot;Last changed on - \&quot;\n                          (.toString (java.util.Date.))))&quot; &quot;(clj-jgit.porcelain/git-status loaded-repo)&quot; &quot;(:untracked (clj-jgit.porcelain/git-status loaded-repo))&quot; &quot;(ns blah\n  (:require clojure.java.io))&quot; &quot;(delete-file\n  \&quot;/tmp/junk\&quot;)&quot; &quot;[&quot; &quot;(clojure.java.io/delete-file \&quot;/tmp/junk\&quot;\n                             true)&quot; &quot;(repo-clean) &quot; &quot;(repo-clean)  &quot; &quot;(repo-clean)   &quot; &quot;(clone-and-modify\n  )&quot; &quot;(repo-clean)&quot; &quot;(init-host-repo)&quot; &quot;(clone-repo)&quot;], :remote []}}</component>
</project>

